(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{423:function(e,_,t){"use strict";t.r(_);var r=t(45),a=Object(r.a)({},(function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"基本查询语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本查询语句"}},[e._v("#")]),e._v(" 基本查询语句")]),e._v(" "),t("p",[e._v("语法")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("select {*|[字段列表]} \nfrom <表1>,<表1>,....\nwhere <表达式>\ngroup by <分组>\nhaving <expression>\norder by <描述>\nlimit <分页>;\n")])])]),t("p",[e._v("案例：")]),e._v(" "),t("p",[e._v("创建表名为fruits，")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("create table fruits\n(\nf_id    char(10)        not null,\ns_id    int         not null,\nf_name  char(255)   not null,\nf_price decimal(8,2)    not null,\nprimary key(f_id)\n);\n")])])]),t("p",[e._v("插入数据：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("insert into fruits (f_id, s_id, f_name, f_price)\n     values('a1', 101,'apple',5.2),\n     ('b1',101,'blackberry', 10.2),\n     ('bs1',102,'orange', 11.2),\n     ('bs2',105,'melon',8.2),\n     ('t1',102,'banana', 10.3),\n     ('t2',102,'grape', 5.3),\n     ('o2',103,'coconut', 9.2),\n     ('c0',101,'cherry', 3.2),\n     ('a2',103, 'apricot',2.2),\n     ('l2',104,'lemon', 6.4),\n     ('b2',104,'berry', 7.6),\n     ('m1',106,'mango', 15.6),\n     ('m2',105,'xbabay', 2.6),\n     ('t4',107,'xbababa', 3.6),\n     ('m3',105,'xxtt', 11.6),\n     ('b5',107,'xxxx', 3.6);\n")])])]),t("p",[e._v("执行完后，接下来就是查看数据了")]),e._v(" "),t("ul",[t("li",[e._v("查看fruits表所有数据")])]),e._v(" "),t("blockquote",[t("p",[e._v("select * from fruits;")])]),e._v(" "),t("ul",[t("li",[e._v("从fruits表中获取f_name和f_price两列数据")])]),e._v(" "),t("blockquote",[t("p",[e._v("select f_name, f_price from fruits;")])]),e._v(" "),t("p",[e._v("注意：* 通配符方便，但是查询慢，")]),e._v(" "),t("h2",{attrs:{id:"where-子句条件查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#where-子句条件查询"}},[e._v("#")]),e._v(" where 子句条件查询")]),e._v(" "),t("p",[e._v("可以使用运算符来查询，大于，小于，等于,不等于....")]),e._v(" "),t("ul",[t("li",[e._v("查询价格为10.2元的水果的名称")])]),e._v(" "),t("blockquote",[t("p",[e._v("select f_name ,f_price from fruits where f_price=10.2;")])]),e._v(" "),t("ul",[t("li",[e._v("查询价格小于10的水果的名称")])]),e._v(" "),t("blockquote",[t("p",[e._v("select f_name ,f_price from fruits where f_price<10.2;")])]),e._v(" "),t("h3",{attrs:{id:"not-in-或者in"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#not-in-或者in"}},[e._v("#")]),e._v(" not in,或者in")]),e._v(" "),t("p",[e._v("查询所有s_id不等于101也不等于102的记录,")]),e._v(" "),t("blockquote",[t("p",[e._v("select f_name ,f_price from fruits where s_id  not in (101,102);")])]),e._v(" "),t("p",[e._v("在于101~102之间")]),e._v(" "),t("blockquote",[t("p",[e._v("select f_name ,f_price from fruits where s_id  in (101,102);")])]),e._v(" "),t("h3",{attrs:{id:"带-not-between-and-的范围查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#带-not-between-and-的范围查询"}},[e._v("#")]),e._v(" 带 not / between and  的范围查询")]),e._v(" "),t("p",[e._v("不在范围查询")]),e._v(" "),t("blockquote",[t("p",[e._v("select f_name ,f_price from fruits where f_price not between 2.00 and 10.20;")])]),e._v(" "),t("p",[e._v("在范围查询")]),e._v(" "),t("blockquote",[t("p",[e._v("select f_name ,f_price from fruits where f_price between 2.00 and 10.20;")])]),e._v(" "),t("h3",{attrs:{id:"like-匹配查询-模糊查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#like-匹配查询-模糊查询"}},[e._v("#")]),e._v(" like 匹配查询，模糊查询")]),e._v(" "),t("p",[e._v("百分号通配符%,匹配任意长度的字符甚至包括零字符，\n下划线通配符'_',一次只能匹配任意一个字符。")]),e._v(" "),t("ul",[t("li",[e._v("查找所有以’b’字母开头的水果,单个字符")])]),e._v(" "),t("blockquote",[t("p",[e._v("select f_name ,f_price from fruits where f_name like 'b%';")])]),e._v(" "),t("ul",[t("li",[e._v("在fruits表中，查询f_name中包含字母’g’的记录")])]),e._v(" "),t("blockquote",[t("p",[e._v("select f_name ,f_price from fruits where f_name like '%g%';")])]),e._v(" "),t("ul",[t("li",[e._v("查询以’b’开头，并以’y’结尾的水果的名称")])]),e._v(" "),t("blockquote",[t("p",[e._v("select f_name ,f_price from fruits where f_name like 'b%y';")])]),e._v(" "),t("ul",[t("li",[e._v("查询以字母’y’结尾，且’y’前面只有4个字母的记录")])]),e._v(" "),t("blockquote",[t("p",[e._v("select f_name ,f_price from fruits where f_name like '----y';")])]),e._v(" "),t("h3",{attrs:{id:"查询空值is-null-或者-is-not-null-子句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询空值is-null-或者-is-not-null-子句"}},[e._v("#")]),e._v(" 查询空值is null 或者 is not null 子句；")]),e._v(" "),t("p",[e._v("查询某字段为空记录。")]),e._v(" "),t("p",[e._v("案例： 创建数据表customers")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("CREATE TABLE customers\n(\n  c_id      int       NOT NULL AUTO_INCREMENT,\n  c_name    char(50)  NOT NULL,\n  c_address char(50)  NULL,\n  c_city    char(50)  NULL,\n  c_zip     char(10)  NULL,\n  c_contact char(50)  NULL,\n  c_email   char(255) NULL,\n  PRIMARY KEY (c_id)\n);\n")])])]),t("p",[e._v("插入数据")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("INSERT INTO customers(c_id, c_name, c_address, c_city, \nc_zip,  c_contact, c_email) \nVALUES(10001, 'RedHook', '200 Street ', 'Tianjin', \n '300000',  'LiMing', 'LMing@163.com'),\n(10002, 'Stars', '333 Fromage Lane',\n 'Dalian', '116000',  'Zhangbo','Jerry@hotmail.com'),\n(10003, 'Netbhood', '1 Sunny Place', 'Qingdao',  '266000',\n 'LuoCong', NULL),\n(10004, 'JOTO', '829 Riverside Drive', 'Haikou', \n '570000',  'YangShan', 'sam@hotmail.com');\n")])])]),t("ul",[t("li",[e._v("查询 customers 表中c_email为空的记录的c_id、c_name和c_email字段值")])]),e._v(" "),t("blockquote",[t("p",[e._v("select c_id, c_name,c_email from  customers where c_email is null;")])]),e._v(" "),t("ul",[t("li",[e._v("查询customers表中c_email不为空的记录的c_id、c_name和c_email字段值")])]),e._v(" "),t("blockquote",[t("p",[e._v("select c_id, c_name,c_email from  customers where c_email is not null;")])]),e._v(" "),t("h3",{attrs:{id:"and-多条件查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#and-多条件查询"}},[e._v("#")]),e._v(" and 多条件查询")]),e._v(" "),t("p",[e._v("同时满足多条件查询,")]),e._v(" "),t("ul",[t("li",[e._v("fruits表中查询s_id = 101，并且f_price大于等于5的水果价格和名称")])]),e._v(" "),t("blockquote",[t("p",[e._v("select f_id, f_price, f_name from fruits where s_id = '101' and f_price >=5;")])]),e._v(" "),t("ul",[t("li",[e._v("在fruits表中查询s_id = 101或者102，且f_price大于5，并且f_name=‘apple’的水果价格和名称")])]),e._v(" "),t("blockquote",[t("p",[e._v("select f_id, f_price, f_name from fruits where s_id IN('101', '102') and f_price >= 5 and f_name = 'apple';")])]),e._v(" "),t("h3",{attrs:{id:"or-查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#or-查询"}},[e._v("#")]),e._v(" or 查询")]),e._v(" "),t("p",[e._v("满足一个条件即可返回。or也可以连接两个甚至多个查询条件。多个条件表达式用and分开。")]),e._v(" "),t("ul",[t("li",[e._v("查询s_id=101或者s_id=102的水果供应商的f_price和f_name")])]),e._v(" "),t("blockquote",[t("p",[e._v("select s_id,f_name, f_price from fruits where s_id = 101 OR s_id = 102;\nselect s_id,f_name, f_price from fruits where s_id in(101,102);")])]),e._v(" "),t("h3",{attrs:{id:"distinct-去重复查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#distinct-去重复查询"}},[e._v("#")]),e._v(" distinct 去重复查询")]),e._v(" "),t("ul",[t("li",[e._v("查询fruits表中s_id字段的值，返回s_id字段值且不得重复,desc 降序排序,asc 升序")])]),e._v(" "),t("blockquote",[t("p",[e._v("SELECT DISTINCT s_id FROM fruits;")])]),e._v(" "),t("h2",{attrs:{id:"对查询结果排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对查询结果排序"}},[e._v("#")]),e._v(" 对查询结果排序")]),e._v(" "),t("p",[e._v("mysql 中可以通过select 使用order by 子句对查询的结果进行排序")]),e._v(" "),t("ul",[t("li",[e._v("单列排序")]),e._v(" "),t("li",[e._v("多列排序")]),e._v(" "),t("li",[e._v("指定排序方向，升序，降序")])]),e._v(" "),t("ol",[t("li",[e._v("查询fruits表的f_name字段值，并对其进行排序,默认升序排序")])]),e._v(" "),t("blockquote",[t("p",[e._v("select f_name from fruits order by f_name;")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("查询fruits表中的f_name和f_price字段，先按f_name排序，再按f_price排序")])]),e._v(" "),t("blockquote",[t("p",[e._v("SELECT f_name, f_price FROM fruits ORDER BY f_name, f_price;")])]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("查询fruits表中的f_name和f_price字段，对结果按f_price降序方式排序")])]),e._v(" "),t("blockquote",[t("p",[e._v("SELECT f_name, f_price FROM fruits ORDER BY f_price DESC;")])]),e._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[e._v("查询fruits表，先按f_price降序排序，再按f_name字段升序排序")])]),e._v(" "),t("blockquote",[t("p",[e._v("SELECT f_price, f_name FROM fruits ORDER BY f_price DESC, f_name;")])]),e._v(" "),t("h2",{attrs:{id:"分组查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分组查询"}},[e._v("#")]),e._v(" 分组查询")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("分组查询是对数据按照某个或者多个字段查询进行分组。")])]),e._v(" "),t("li",[t("p",[e._v("[group by 字段] [having <条件表达式>]")]),e._v(" "),t("ul",[t("li",[e._v("创建分组")]),e._v(" "),t("li",[e._v("使用having过滤分组")]),e._v(" "),t("li",[e._v("在group by 子句中使用with rollup(总和)")]),e._v(" "),t("li",[e._v("多字段分组")]),e._v(" "),t("li",[e._v("group by 和 order by 一起使用")])])])]),e._v(" "),t("ul",[t("li",[e._v("根据s_id对fruits表中的数据进行分组")])]),e._v(" "),t("blockquote",[t("p",[e._v("select s_id ,count(*) as total from fruits group by s_id;")])]),e._v(" "),t("h3",{attrs:{id:"group-by"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#group-by"}},[e._v("#")]),e._v(" group by")]),e._v(" "),t("ul",[t("li",[e._v("根据s_id对fruits表中的数据进行分组，将每个供应商的水果名称显示出来,group_concat聚合函数，也可以排序")])]),e._v(" "),t("blockquote",[t("p",[e._v("select s_id, group_concat(f_name order by f_name asc ) as names from fruits group by s_id;")])]),e._v(" "),t("h3",{attrs:{id:"having"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#having"}},[e._v("#")]),e._v(" having")]),e._v(" "),t("p",[e._v("having：用于对where和group by查询出来的分组经行过滤，查出满足条件的分组结果。它是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作。\n执行顺序：select –>where –> group by–> having–>order by")]),e._v(" "),t("ul",[t("li",[e._v("根据s_id对fruits表中的数据进行分组，并显示水果种类大于1的分组信息,count()函数，返回总数")])]),e._v(" "),t("blockquote",[t("p",[e._v("select s_id , group_concat(f_name) as names from fruits group by s_id having count(f_name) > 1;")])]),e._v(" "),t("h3",{attrs:{id:"with-rollup-ifnull"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#with-rollup-ifnull"}},[e._v("#")]),e._v(" with rollup， ifnull()")]),e._v(" "),t("p",[e._v("with rollup是用来在分组统计数据的基础上再进行统计汇总")]),e._v(" "),t("ul",[t("li",[e._v("根据s_id对fruits表中的数据进行分组，并显示记录数量")])]),e._v(" "),t("blockquote",[t("p",[e._v("select ifnull(s_id,'总数') as s_id , count(*) as total from fruits group by s_id with rollup;")])]),e._v(" "),t("h3",{attrs:{id:"多字段分组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多字段分组"}},[e._v("#")]),e._v(" 多字段分组")]),e._v(" "),t("ul",[t("li",[e._v("根据s_id和f_name字段对fruits表中的数据进行分组，分析：先按照s_id分组，在f_name分组")])]),e._v(" "),t("blockquote",[t("p",[e._v("select * from fruits group by s_id ,f_name;")])]),e._v(" "),t("p",[e._v("为了演示效果，首先创建数据表")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("CREATE TABLE orderitems\n(\n  o_num      int          NOT NULL,\n  o_item     int          NOT NULL,\n  f_id       char(10)     NOT NULL,\n  quantity   int          NOT NULL,\n  item_price decimal(8,2) NOT NULL,\n  PRIMARY KEY (o_num,o_item)\n) ;\n")])])]),t("p",[e._v("然后插入演示数据。SQL语句如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("INSERT INTO orderitems(o_num, o_item, f_id, quantity, item_price)\nVALUES(30001, 1, 'a1', 10, 5.2),\n(30001, 2, 'b2', 3, 7.6),\n(30001, 3, 'bs1', 5, 11.2),\n(30001, 4, 'bs2', 15, 9.2),\n(30002, 1, 'b3', 2, 20.0),\n(30003, 1, 'c0', 100, 10),\n(30004, 1, 'o2', 50, 2.50),\n(30005, 1, 'c0', 5, 10),\n(30005, 2, 'b1', 10, 8.99),\n(30005, 3, 'a2', 10, 2.2),\n(30005, 4, 'm1', 5, 14.99);\n")])])]),t("ul",[t("li",[e._v("查询订单价格大于100的订单号和总订单价格")])]),e._v(" "),t("blockquote",[t("p",[e._v("select o_num , sum(quantity * item_price) as orderTotal from orderitems group by o_num having sum(quantity * item_price) >= 100;")])]),e._v(" "),t("h3",{attrs:{id:"group-by-和-order-by一起使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#group-by-和-order-by一起使用"}},[e._v("#")]),e._v(" group by 和 order by一起使用")]),e._v(" "),t("ul",[t("li",[e._v("可以看到，返回的结果中orderTotal列的总订单价格并没有按照一定顺序显示，接下来，使用ORDER BY关键字按总订单价格排序显示结果")])]),e._v(" "),t("blockquote",[t("p",[e._v("select o_num ,sum(quantity"),t("em",[e._v("item_price) as orderTotal from orderitems group by o_num having sum(quantity")]),e._v("item_price) >= 100 order by orderTotal;")])]),e._v(" "),t("h3",{attrs:{id:"用limit-限制查询结果的数量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用limit-限制查询结果的数量"}},[e._v("#")]),e._v(" 用limit 限制查询结果的数量")]),e._v(" "),t("ol",[t("li",[e._v("limit 关键字可以用放回指定位置的记录")]),e._v(" "),t("li",[e._v("limit [位置偏移量，]行数")])]),e._v(" "),t("ul",[t("li",[e._v("限制返回前4行，")])]),e._v(" "),t("blockquote",[t("p",[e._v("select * from fruits limit 4;")])]),e._v(" "),t("ul",[t("li",[e._v("返回从第5个记录开始的，行数长度为3的记录，索引重0开始。")])]),e._v(" "),t("blockquote",[t("p",[e._v("select * from fruits limit 4 ,3;")])])])}),[],!1,null,null,null);_.default=a.exports}}]);